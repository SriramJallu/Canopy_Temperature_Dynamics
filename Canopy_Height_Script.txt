// Authors: Riyaz Shaik, Sriram Jallu., 2022
// Canopy Height Calculations.


//Region of Interest
//Before running the code, name the imported shapefile as "roi"

//Projection
var crs_roi = 'EPSG:2225'

// Load Sentinel-1 for the post-rainy season.
var S1_PRS = ee.ImageCollection('COPERNICUS/S1_GRD')
    .filterDate('2021-08-01', '2021-10-31')                                     //Date Range for the study
    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
    .filter(ee.Filter.eq('instrumentMode', 'IW'))
    .filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING'))                 //As per the Region of Interest
    .filterBounds(roi);


print('Images', S1_PRS); 
// Prepare inter-quartile range (IQR) 
var S1_PRS_pc = S1_PRS.reduce(ee.Reducer.percentile([20,50,80]));

print('Images_PC', S1_PRS_pc);

// Convert to natural units (linear units, which can be averaged)
var S1_PRS_pc = ee.Image(10).pow(S1_PRS_pc.divide(10));

print('Images_PC_2', S1_PRS_pc);

var S1_PRS_pc_Feats = S1_PRS_pc.select(['VH_p50','VV_p50']).clip(roi);

// Reproject to Region of Interst                
var S1_PRS_pc_Feats = S1_PRS_pc_Feats.reproject({crs: crs_roi,scale: 30});

// Check projection information
print('Projection, crs, and crs_transform:', S1_PRS_pc_Feats.projection());    

// Calculate IQR for the VV polarization
var PRS_VV_iqr = S1_PRS_pc_Feats
	.addBands((S1_PRS_pc.select('VV_p80')
	.subtract(S1_PRS_pc.select('VV_p20')))
	.rename('VV_iqr'));

// Calculate IQR for the VH polarization
var PRS_VH_iqr = S1_PRS_pc_Feats
	.addBands((S1_PRS_pc.select('VH_p80')
	.subtract(S1_PRS_pc.select('VH_p20')))
	.rename('VH_iqr'));

// Print the image to the console
print('Post-rainy Season VV IQR', PRS_VV_iqr);

// Print the image to the console
print('Post-rainy Season VH IQR', PRS_VH_iqr);

// Display S1 inter-quartile range imagery
Map.addLayer(PRS_VV_iqr.clip(roi), {'bands': 'VV_iqr', min: 0,max: 0.1}, 'Sentinel-1 IW VV');
Map.addLayer( PRS_VH_iqr.clip(roi), {'bands': 'VH_iqr', min: 0,max: 0.1}, 'Sentinel-1 IW VH');

///////////////////////////////////////////////////////////////////////////////////////////////////////
// Load Sentinel-2 spectral reflectance data.
var s2 = ee.ImageCollection('COPERNICUS/S2_SR');

// Create a function to mask clouds using the Sentinel-2 QA band.
function maskS2clouds(image) {
  var qa = image.select('QA60');

  // Bits 10 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = ee.Number(2).pow(10).int();
  var cirrusBitMask = ee.Number(2).pow(11).int();

  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0).and(
             qa.bitwiseAnd(cirrusBitMask).eq(0));

  // Return the masked and scaled data.
  return image.updateMask(mask).divide(10000);
}

// Filter clouds from Sentinel-2 for the date range of study
var composite = s2.filterDate('2021-08-01', '2021-10-31')
                  // Pre-filter to get less cloudy granules.
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
                  .map(maskS2clouds)
                  .select('B2', 'B3', 'B4','B5','B6','B7','B8','B11', 'B12'); 

// Reproject to Region of Interest (Change the Projection Code)                  
var S2_composite = composite.median().reproject({crs: crs_roi, scale: 30});

print('S2_Composite', S2_composite);
// Check projection information                 
print('S2_Projection, crs, and crs_transform:', S2_composite.projection());

// Display a composite S2 imagery
Map.addLayer(S2_composite.clip(roi), {bands: ['B11', 'B8', 'B3'], min: 0, max: 0.3}, 'S2_Composite');

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Load SRTM
var SRTM = ee.Image("USGS/SRTMGL1_003");
// Clip Elevation
var elevation = SRTM.clip(roi);

// Reproject Elevation to the Region of Interest (Change the Projection Code)                
var elevation = elevation.reproject({crs: crs_roi,scale: 30});
  
// Check projection information
print('DEM_Projection, crs, and crs_transform:', elevation.projection()); 
print('Elevation', elevation)
Map.addLayer(elevation, {bands: 'elevation', min: 0, max: 1000}, 'DEM');

// Derive slope from the SRTM
var slope = ee.Terrain.slope(SRTM).clip(roi);

// Reproject Slope to the Region of Interst (Change the Projection Code)              
var slope = slope.reproject({crs: crs_roi,scale: 30});
  
// Check projection information
print('Slope_Projection, crs, and crs_transform:', slope.projection()); 

///////////////////////////////////////////////////////////////////////////////////////////////////
// Load ESA World Cover data
var dataset = ee.ImageCollection("ESA/WorldCover/v200").first();


// Clip the land cover to the boundary
var ESA_LC_2021 = dataset.clip(roi);
print('Land_Cover',ESA_LC_2021)

// Extract forest areas from the land cover
var forest_mask = ESA_LC_2021.updateMask(ESA_LC_2021.eq(10));

// Display forests only
Map.addLayer(forest_mask, {bands: ['Map'],}, "Trees");

/////////////////////////////////////////////////////////////////////////////////////////////
// Merge the predictor variables
var mergedCollection = S2_composite
  .addBands(PRS_VV_iqr
  .addBands(PRS_VH_iqr
  .addBands(elevation
  .addBands(slope
  .addBands(forest_mask)))));

// Clip to the output image to Harare study area boundary.
var clippedmergedCollection = mergedCollection.clip(roi);
print('clippedmergedCollection: ', clippedmergedCollection);

// Bands to include in the classification
var bands = ['B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B11', 'B12', 'VV_iqr', 'VH_iqr', 'elevation', 'slope', 'Map'];

////////////////////////////////////////////////////////////////////////////
// Prepare training dataset
//The Global Ecosystem Dynamics Investigation (GEDI) 
// GEDI's Level 2A Geolocated Elevation and Height Metrics Product (GEDI02_A) is primarily composed of 
// 100 Relative Height (RH) metrics, which collectively describe the waveform collected by GEDI.
// The original GEDI02_A product is a table of point with a spatial resolution (average footprint) of 25 meters. 
// More information at https://lpdaac.usgs.gov/documents/986/GEDI02_UserGuide_V2.pdf

// Define a mask
var qualityMask = function(im) {
  return im.updateMask(im.select('quality_flag').eq(1))
      .updateMask(im.select('degrade_flag').eq(0));
};

// Import the "EDI02_A_002_MONTHLY: dataset ('rh98 (98th Percentile of Relative Height)' can be varied accordingly to the need)
var dataset = ee.ImageCollection('LARSE/GEDI/GEDI02_A_002_MONTHLY')
                  .map(qualityMask)
                  .select('rh98').filterBounds(roi);
                  
print('dataset', dataset)

// Create a pallete to visualize the dataset
var gediVis = {
  min: 1,
  max: 60,
  palette: 'darkred,red,orange,green,darkgreen',
};

Map.addLayer(dataset, gediVis, 'rh98');

// Define projection and scale parameters
var projection = dataset.first().projection().aside(print);
print('Var_Projection',projection);
var scale = projection.nominalScale().aside(print);
print('Var_Scale',scale);

var mosaic = dataset.mosaic().setDefaultProjection({crs:projection, scale:scale});
print('mosaic', mosaic);

// Sample Points from the dataset (Can be varied accordingly to the requirement/study)
var points = mosaic.sample({
  region: roi,
  scale: scale,
  numPixels: 12000, 
  projection: projection,
  geometries: true});

// Check the number of the training points
print(points.size());
print(points.limit(10));
print('Points', points);
// Display the training points
Map.addLayer(points);

// Add a random column (named random) and specify seed value for repeatability.
var datawithColumn = points.randomColumn('random', 50);
print('column_data', datawithColumn);

// Traning (70%) and Validation data (30%) split (Can be varied accordingly to the requirement/study)
var split = 0.7; 
var trainingData = datawithColumn.filter(ee.Filter.lt('random', split));

// Print the training data
print('training data', trainingData);

var validationData = datawithColumn.filter(ee.Filter.gte('random', split));

// Print the testing (validation) data
print('validation data', validationData);

//////////////////////////////////////////////////////////////////////
// Perform regression modeling using RF classifier

// Collect training data
var training = clippedmergedCollection.select(bands).sampleRegions({
  collection: trainingData,
  properties: ['rh98'],
  scale: 30 // Need to change the scale of training data to avoid the 'out of memory' problem
  });
print('training data original', training);

// Train a random forest classifier for regression 
var classifier = ee.Classifier.smileRandomForest(200)               //Number of Tress can be varied to obtain the Optimzed Results
  .setOutputMode('REGRESSION')
  .train({
    features: training, 
    classProperty: "rh98",
    inputProperties: bands
    });
v
//Run the classification and clip it to the boundary
var regression = clippedmergedCollection.select(bands).classify(classifier, 'predicted').clip(roi);
print('Regresssion1',regression)

// Load and define a continuous palette
var palettes = require('users/gena/packages:palettes');

// Choose and define a palette
var palette = palettes.colorbrewer.YlGn[5];

// Display the input imagery and the regression classification.
// get dictionaries of min & max predicted value
  var regressionMin = (regression.reduceRegion({
    reducer: ee.Reducer.min(),
    scale: 30, 
    crs: crs_roi,
    geometry: roi,
    bestEffort: true,
    tileScale: 5
  }));
  print('RegressionMin',regressionMin);
  var regressionMax = (regression.reduceRegion({
    reducer: ee.Reducer.max(),
    scale: 30, 
    crs: crs_roi,
    geometry: roi,
    bestEffort: true,
    tileScale: 5
  }));
  
// Add to map
var viz = {palette: palette, min: regressionMin.getNumber('predicted').getInfo(), max: regressionMax.getNumber('predicted').getInfo()};
Map.addLayer(regression, viz, 'Regression');

// Create the panel for the legend items.
var legend = ui.Panel({
  style: {
    position: 'bottom-left',
    padding: '8px 15px'
  }
});

// Create and add the legend title.
var legendTitle = ui.Label({
  value: 'TC Height (in m)',
  style: {
    fontWeight: 'bold',
    fontSize: '18px',
    margin: '0 0 4px 0',
    padding: '0'
  }
});

legend.add(legendTitle);

// create the legend image
var lon = ee.Image.pixelLonLat().select('latitude');
var gradient = lon.multiply((viz.max-viz.min)/100.0).add(viz.min);
var legendImage = gradient.visualize(viz);
 
// create text on top of legend
var panel = ui.Panel({
widgets: [
ui.Label(viz['max'])
],
});

legend.add(panel);

// create thumbnail from the image
var thumbnail = ui.Thumbnail({
image: legendImage,
params: {bbox:'0,0,10,100', dimensions:'10x200'},
style: {padding: '1px', position: 'bottom-center'}
});
 
// add the thumbnail to the legend
legend.add(thumbnail);
 
// create text on top of legend
var panel = ui.Panel({
widgets: [
ui.Label(viz['min'])
],
});

legend.add(panel);
Map.add(legend);

// Zoom to the regression on the map
Map.centerObject(roi, 11);

// Check model performance
// Get details of classifier
var classifier_details = classifier.explain();
print('Calssifier Details',classifier_details);

// Explain the classifier with importance values
var variable_importance = ee.Feature(null, ee.Dictionary(classifier_details).get('importance'));
print('Var_imp', variable_importance);

var chart =
  ui.Chart.feature.byProperty(variable_importance)
  .setChartType('ColumnChart')
  .setOptions({
  title: 'Random Forest Variable Importance',
  legend: {position: 'none'},
  hAxis: {title: 'Bands'},
  vAxis: {title: 'Importance'}
});

// Plot a chart
print("Variable importance:", chart);

// Create model assessment statistics
// Get predicted regression points in same location as training data
var predictedTraining = regression.sampleRegions({collection:trainingData, geometries: true});
print('predictedTraining', predictedTraining);

// Separate the observed (agb_GEDI) and predicted (regression) properties
var sampleTraining = predictedTraining.select(['rh98', 'predicted']);
print('smapleTraining', sampleTraining);

// Create chart, print it
var chartTraining = ui.Chart.feature.byFeature(sampleTraining, 'rh98', 'predicted')
.setChartType('ScatterChart').setOptions({
title: 'Predicted vs Observed - Training data ',
hAxis: {'title': 'observed'},
vAxis: {'title': 'predicted'},
pointSize: 3,
trendlines: { 0: {showR2: true, visibleInLegend: true} ,
1: {showR2: true, visibleInLegend: true}}});
print(chartTraining);

// Compute Root Mean Squared Error (RMSE)
// Get array of observation and prediction values 
var observationTraining = ee.Array(sampleTraining.aggregate_array('rh98'));

var predictionTraining = ee.Array(sampleTraining.aggregate_array('predicted'));

// Compute residuals
var residualsTraining = observationTraining.subtract(predictionTraining);

// Compute RMSE with equation and print the result
var rmseTraining = residualsTraining.pow(2).reduce('mean', [0]).sqrt();
print('Training RMSE', rmseTraining);

/////////////////////////////////////////////////////////////////////////////
//Perform validation
// Get predicted regression points in same location as validation data
var predictedValidation = regression.sampleRegions({collection:validationData, geometries: true});

// Separate the observed (rh98) and predicted (regression) properties
var sampleValidation = predictedValidation.select(['rh98', 'predicted']);

// Create chart and print it
var chartValidation = ui.Chart.feature.byFeature(sampleValidation, 'predicted', 'rh98')
.setChartType('ScatterChart').setOptions({
title: 'Predicted vs Observed - Validation data',
hAxis: {'title': 'predicted'},
vAxis: {'title': 'observed'},
pointSize: 3,
trendlines: { 0: {showR2: true, visibleInLegend: true} ,
1: {showR2: true, visibleInLegend: true}}});
print(chartValidation);

// Compute RMSE
// Get array of observation and prediction values 
var observationValidation = ee.Array(sampleValidation.aggregate_array('rh98'));

var predictionValidation = ee.Array(sampleValidation.aggregate_array('predicted'));

// Compute residuals
var residualsValidation = observationValidation.subtract(predictionValidation);

// Compute RMSE with equation and print it
var rmseValidation = residualsValidation.pow(2).reduce('mean', [0]).sqrt();
print('Validation RMSE', rmseValidation);

///////////////////////////////////////////////////////////////////////////
// Export the image, specifying scale and region.
Export.image.toDrive({
  image: regression,
  description: 'Canopy_Height',
  scale: 1000,
  crs: crs_roi,
  maxPixels: 6756353855,
  region: roi
});

var fc = ee.FeatureCollection(roi);

Export.table.toDrive({
  collection:fc
});
